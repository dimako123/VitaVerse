<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vitamin Search History</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
</head>
<body>

<div>
	<input type="hidden" value="taha" id="sUserId">
    <label for="vitaminSelect">Select Vitamin:</label>
    <select id="vitaminSelect">
        <!-- Add options dynamically based on available vitamins -->
    </select>
    <button onclick="handleVitaminSelection()">Get Data</button>
</div>

<div>
    <canvas id="vitaminChart1" width="400" height="200"></canvas>
</div>
<div>
	<canvas id="vitaminChart2" width="400" height="200"></canvas>
</div>
<div>
	<canvas id="vitaminChart3" width="400" height="200"></canvas>
</div>

<script>
	var sUserId='taha';
    var vitaminData = {};
    var chartType = 'line'; // Default chart type
    var selectedVitamin = 'Vitamin A'; // Default selected vitamin
    function handleVitaminSelection() 
	{
        selectedVitamin = $('#vitaminSelect').val();
		updateChart(vitaminData, chartType, 'vitaminChart1');
        updateChart(vitaminData, chartType, 'vitaminChart2');
        updateChart(vitaminData, chartType, 'vitaminChart3');
    }
	function updateChart(data, chartType,DISPLY_DIV_ID) 
	{
		var ctx = document.getElementById(DISPLY_DIV_ID).getContext('2d');
		// Destroy existing chart if it exists
		if (window.myChart) {
			
		}

		// Check if data is an object and convert it to an array
		const dataArray = Array.isArray(data) ? data : Object.values(data);
		// Extract unique vitamins from the data
		const vitamins = [...new Set(dataArray.map(item => item.sVitamin))];
		// Populate the vitamin dropdown dynamically
		$('#vitaminSelect').empty();
		vitamins.forEach(vitamin => {
			$('#vitaminSelect').append(`<option value="${vitamin}">${vitamin}</option>`);
		});
		// Extract date-wise values for all vitamins for the specified user (sUserId)
		var dateWiseData = {};
		vitamins.forEach(vitamin => 
		{
			dateWiseData[vitamin] = {};
		});

		dataArray.forEach(item => {
		// Filter data for the specified user
		if (item.sUserId === sUserId) {
			var date = parseCustomDateFormat(item.sDate);
			var time = date.toLocaleTimeString(); // Get the time part
			date = date.toLocaleDateString(); // Get the date part
			var value = item.sVitaminValue;
			var level = item.sVitaminLevel;

			// Set different colors based on vitaminLevel
			var backgroundColor, borderColor, borderWidth;
			if (level === 'low') {
				backgroundColor = 'rgba(255, 0, 0, 0.2)'; // Red color for low
				borderColor = 'rgba(255, 0, 0, 1)';
				borderWidth = 1;
			} else if (level === 'normal') {
				backgroundColor = 'rgba(0, 255, 0, 0.2)'; // Green color for normal
				borderColor = 'rgba(0, 255, 0, 1)';
				borderWidth = 1;
			} else if (level === 'high') {
				backgroundColor = 'rgba(255, 0, 0, 0.2)'; // Red color for high
				borderColor = 'rgba(255, 0, 0, 1)';
				borderWidth = 1;
			}

			// Create a unique label combining date and time
			var label = `${date} ${time}`;
			// Store data for each vitamin, date, and time combination
			if (!dateWiseData[item.sVitamin][label]) {
				dateWiseData[item.sVitamin][label] = {
					value: value,
					unit: item.sVitaminUnit,
					level: item.sVitaminLevel,
					backgroundColor: backgroundColor,
					borderColor: borderColor,
					borderWidth: borderWidth
				};
			}
		}
		});
		// Create a new chart with a separate line for each vitamin
		window.myChart = new Chart(ctx, {
			type: chartType,
			data: {
				labels: Object.keys(dateWiseData[selectedVitamin] || {}),
				datasets: vitamins.map(vitamin => ({
					label: vitamin,
					data: Object.keys(dateWiseData[vitamin]).map(date => ({
						x: date,
						y: dateWiseData[vitamin][date].value,
						borderColor: dateWiseData[vitamin][date].borderColor,
						backgroundColor: dateWiseData[vitamin][date].backgroundColor,
						borderWidth: dateWiseData[vitamin][date].borderWidth
					}))
				}))
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				},
				plugins: {
					tooltip: {
						callbacks: {
							label: function (context) {
								var label = context.dataset.label || '';
								var value = context.parsed.y;
								var unit = dateWiseData[context.dataset.label][context.label].unit;
								var level = dateWiseData[context.dataset.label][context.label].level;
								return label + ': ' + value + ' ' + unit + ' ' + level;
							}
						}
					},
					legend: {
						display: true,
						position: 'top',
					},
					title: {
						display: true,
						text: 'Date-wise Vitamin Values for All Vitamins (User: taha)',
						fontSize: 16
					},
					elements: {
						line: {
							tension: 0, // Disable bezier curves for the lines
						}
					},
					datalabels: {
						display: true,
						color: 'black',
						backgroundColor: function (context) {
							return context.dataset.backgroundColor;
						},
						borderRadius: 4,
						font: {
							weight: 'bold'
						},
						formatter: function (value, context) {
							return value + ' ' + context.dataset.data[context.dataIndex].unit;
						}
					}
				}
			}
		});
	}
    function parseCustomDateFormat(dateString) {
        var parts = dateString.split(/[\s,\/:]+/); // Split the date string into parts
        var day = parseInt(parts[0], 10);
        var month = parseInt(parts[1], 10) - 1; // Months are zero-based in JavaScript
        var year = parseInt(parts[2], 10);
        var hours = parseInt(parts[3], 10);
        var minutes = parseInt(parts[4], 10);
        var seconds = parseInt(parts[5], 10);
        return new Date(year, month, day, hours, minutes, seconds);
    }
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
    $(document).ready(function () 
	{
		GetGraphDataBy_API("vitaminChart1");
    });
	function GetGraphDataBy_API()
	{
		 // Make an Ajax request on page load with the user ID 'leen'
		 $.ajax({
            url: 'api/searchhistory', // Replace with your actual URL
            method: 'GET',
            data: { sUserId: 'leen' },
            dataType: 'json',
            success: function (data) {
                // Call updateChart with the extracted data
                updateChart(data, 'line',"vitaminChart1");
				updateChart(data, 'line',"vitaminChart2");
				updateChart(data, 'line',"vitaminChart3");
            },
            error: function (error) {
                console.error('Error fetching data:', error);
            }
        });
	}
	
</script>

</body>
</html>
